
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" >
<head runat="server">
    <title>ServiceStack Examples :: Client</title>
    
    <style type="text/css">
        BODY {
            font: 12px Arial;
            width: 768px;
        }
        CODE
        {
        	white-space: pre;
        }
    </style>
    
    <script type="text/javascript" src="js/jquery-1.3.2.min.js" />
    <script type="text/javascript" src="js/jquery-json.js" />
    <script type="text/javascript" src="js/JsonServiceClient.js" />
    
    <script type="text/javascript">
    <!--

        //Get the hostName of this page
        var url = location.href.substring(location.href.indexOf("://"));
        var hostName = url.substring(0, url.indexOf('/'));

        //Create a JsonServiceClient passing in the baseUrl where your services are hosted.
        //Note: services not on the same domain will require a crossdomain.xml policy
        var serviceClient = new JsonServiceClient("http://" + hostName + "/ServiceStack.Examples.Host.Web/");

        $(function()
        {

            $("#btnGetFactorial").click(function()
            {
                var request = { ForNumber: $("#txtGetFactorial").text() };
                

                serviceClient.getFromJsonService("GetFactorial", request, function(e)
                {
                    //alert(e);
                    $("#serviceGetFactorial .result").html(e.result.Result);
                });

            });

        });
    -->
    </script>
</head>
<body>

    <h1>Calling web services with Ajax</h1>
    
    <p>
        For performance reasons, the preferred endpoint for calling ServiceStack services in Ajax clients 
        is using JSON via the JSON webservice endpoint at: '/Public/Json/SyncReply/{WebServiceName}'
        
        As this endpoint is just a standard JSON service we can use any ajax client to call them with.
        In this example We're using a light-wrapper around jQuery's $.ajax client:
    </p>
    
    <code>
        //Get the hostName of this page
        var url = location.href.substring(location.href.indexOf("://"));
        var hostName = url.substring(0, url.indexOf('/'));
        
        //Create a JsonServiceClient passing in the baseUrl where your services are hosted.
        //Note: services not on the same domain will require a crossdomain.xml policy
        var serviceClient = new JsonServiceClient("http://" + hostName + "/ServiceStack.Examples.Host.Web/");
    </code>
    
    <div id="ajax">
        <div id="serviceGetFactorial" class="service">
            <div class="input">
                <h3>Get Factorial Service</h3>
                <label>For Number:</label>
                <input type="text" id="txtGetFactorial" value="3" />
                <button id="btnGetFactorial">Go</button>
            </div>
            
            <h4>Result</h4>
            <div class="result"></div>
            
            <code>
                var request = { ForNumber: userId };

                serviceClient.getFromJsonService("GetFactorial", request, function(e) {
                    $("#serviceGetFactorial .result").html(e.result.Result);
                });
            </code>
        </div>
    </div>

</body>
</html>
