using System;
using System.Web;
using NServiceKit.ServiceHost;
using NServiceKit.Text;
using NServiceKit.Logging;
using NServiceKit.WebHost.Endpoints.Extensions;
using NServiceKit.WebHost.Endpoints.Metadata;
using NServiceKit.WebHost.Endpoints.Support.Templates;

namespace NServiceKit.WebHost.Endpoints.Support.Metadata
{
    /// <summary>A wsdl metadata handler base.</summary>
    public abstract class WsdlMetadataHandlerBase : HttpHandlerBase
    {
        private readonly ILog log = LogManager.GetLogger(typeof(WsdlMetadataHandlerBase));

        /// <summary>Gets wsdl template.</summary>
        ///
        /// <returns>The wsdl template.</returns>
        protected abstract WsdlTemplateBase GetWsdlTemplate();

        /// <summary>Executes the given context.</summary>
        ///
        /// <param name="context">The context.</param>
        public override void Execute(HttpContext context)
        {
            EndpointHost.Config.AssertFeatures(Feature.Metadata);

            context.Response.ContentType = "text/xml";

            var baseUri = context.Request.GetParentBaseUrl();
            var optimizeForFlash = context.Request.QueryString["flash"] != null;
            var operations = new XsdMetadata(
                EndpointHost.Metadata, flash: optimizeForFlash);

            try
            {
                var wsdlTemplate = GetWsdlTemplate(operations, baseUri, optimizeForFlash, context.Request.GetBaseUrl(), EndpointHost.Config.SoapServiceName);
                context.Response.Write(wsdlTemplate.ToString());
            }
            catch (Exception ex)
            {
                log.Error("Autogeneration of WSDL failed.", ex);

                context.Response.Write("Autogenerated WSDLs are not supported "
                    + (Env.IsMono ? "on Mono" : "with this configuration"));
            }
        }

        /// <summary>Executes.</summary>
        ///
        /// <param name="httpReq">The HTTP request.</param>
        /// <param name="httpRes">The HTTP resource.</param>
        public void Execute(IHttpRequest httpReq, IHttpResponse httpRes)
        {

            EndpointHost.Config.AssertFeatures(Feature.Metadata);

            httpRes.ContentType = "text/xml";

            var baseUri = httpReq.GetParentBaseUrl();
            var optimizeForFlash = httpReq.QueryString["flash"] != null;
            var operations = new XsdMetadata(EndpointHost.Metadata, flash: optimizeForFlash);

            try
            {
                var wsdlTemplate = GetWsdlTemplate(operations, baseUri, optimizeForFlash, httpReq.ResolveBaseUrl(), EndpointHost.Config.SoapServiceName);
                httpRes.Write(wsdlTemplate.ToString());
            }
            catch (Exception ex)
            {
                log.Error("Autogeneration of WSDL failed.", ex);

                httpRes.Write("Autogenerated WSDLs are not supported "
                    + (Env.IsMono ? "on Mono" : "with this configuration"));
            }
        }

        /// <summary>Gets wsdl template.</summary>
        ///
        /// <param name="operations">      The operations.</param>
        /// <param name="baseUri">         URI of the base.</param>
        /// <param name="optimizeForFlash">true to optimize for flash.</param>
        /// <param name="rawUrl">          URL of the raw.</param>
        /// <param name="serviceName">     Name of the service.</param>
        ///
        /// <returns>The wsdl template.</returns>
        public WsdlTemplateBase GetWsdlTemplate(XsdMetadata operations, string baseUri, bool optimizeForFlash, string rawUrl, string serviceName)
        {
            var xsd = new XsdGenerator
            {
                OperationTypes = operations.GetAllTypes(),
                OptimizeForFlash = optimizeForFlash,
            }.ToString();

            var soapFormat = GetType().Name.StartsWith("Soap11", StringComparison.OrdinalIgnoreCase)
                ? Format.Soap11 : Format.Soap12;

            var wsdlTemplate = GetWsdlTemplate();
            wsdlTemplate.Xsd = xsd;
            wsdlTemplate.ServiceName = serviceName;
            wsdlTemplate.ReplyOperationNames = operations.GetReplyOperationNames(soapFormat);
            wsdlTemplate.OneWayOperationNames = operations.GetOneWayOperationNames(soapFormat);

            if (rawUrl.ToLower().StartsWith(baseUri))
            {
                wsdlTemplate.ReplyEndpointUri = rawUrl;
                wsdlTemplate.OneWayEndpointUri = rawUrl;
            }
            else
            {
                var suffix = soapFormat == Format.Soap11 ? "soap11" : "soap12";
                wsdlTemplate.ReplyEndpointUri = baseUri + suffix;
                wsdlTemplate.OneWayEndpointUri = baseUri + suffix;
            }

            return wsdlTemplate;
        }
    }
}