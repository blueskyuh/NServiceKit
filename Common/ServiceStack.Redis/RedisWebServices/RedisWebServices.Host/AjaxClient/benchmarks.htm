<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=8">
    <title>JSON vs JSV Benchmarks</title>

    <style type="text/css">
        BODY {
            font-family: arial;
        }

        H2 {
            color: #073;
            margin-bottom: 20px;
            font: normal 26px Tahoma;
        }

        H2 SPAN {
            color: #444;
            background: #f1f1f1;
            padding: 0 5px;
        }

        H3 {
            border-top: solid 1px #ccc;
            padding: 10px 0;
            color: #333;
            font: normal 22px Tahoma;
            margin-left: 10px;
        }

        SPAN.summary {
            background: #FAFFBD;
            border: solid 1px #C3D9FF;
            display: block;
            margin: 10px;
            padding: 10px;
            width: 850px;
            font-size: 13px;
        }

        SPAN.summary STRONG {
            padding: 0 5px;
            font-size: 18px;
            line-height: 28px;
        }

        #combined H3 {
            color: #073;
            margin-bottom: 0;
            border: none;
            font-size: 26px;
        }

        #combined TABLE THEAD TH {
            background: #036;
        }

        TABLE {
            border-collapse: collapse;
            margin: 20px;
        }

        TABLE CAPTION {
            color: #333;
            padding-bottom: 5px;
            font-style: italic;
            font-size: 13px;
        }

        TABLE THEAD TH {
            background: #444;
            color: #fff;
            padding: 5px 10px;
            font-weight: normal;
        }

        TABLE TBODY TH {
            background: #f1f1f1;
            font-weight: normal;
            padding: 5px 20px 5px 10px;
        }

        TABLE TBODY TH.c1 {
            text-align: left;
        }

        TABLE TD {
            padding: 5px 10px;
            text-align: center;
            border-right: solid 1px #f1f1f1;
            border-bottom: solid 1px #f1f1f1;
        }

        TR.failed TD, TR.failed TH {
            text-decoration: line-through;
            color: red;
        }

        TR.best-time TD, TR.best-time TH {
            color: green;
            font-weight: bold;
        }
    </style>

    <script src="js/closure-library/closure/goog/base.js"></script>

    <script type="text/javascript" src="js/jquery-1.4.2.min.js"></script>
    <script type="text/javascript" src="js/AjaxStack.snippets.js"></script>
    <script type="text/javascript" src="js/JSV.js"></script>

    <script type="text/javascript">
        goog.require('goog.json');
    </script>

    <script type="text/javascript">
        var jsonServiceClient, jsvServiceClient, jsonData, jsvData;

        $(function() {
            jsonServiceClient = new JsonServiceClient("http://localhost/RedisWebServices.Host/Public/");
            jsvServiceClient = new JsvServiceClient("http://localhost/RedisWebServices.Host/Public/");

            var isReadyFn = function() {
                if (jsonData && jsvData) $("#btnRun").attr('disabled',false);
            };

            jsonServiceClient.getFromService("GetNorthwindData", null, function(r) {
                jsonData = r;
                isReadyFn();
            });
            jsvServiceClient.getFromService("GetNorthwindData", null, function(r) {
                jsvData = r;
                isReadyFn();
            });

            $("#btnRun").click(function() {
                var times = 1000;

                var typeResults = {};
                var typeBenchmarkTimes = {};
                var combinedBenchmarkTimes = {};

                var row = jsonData.Categories[0];
                for (var rowType in jsonData)
                {
                    var rows = jsonData[rowType];
                    if (!rows.length || rows.length == 0) continue;

                    var row = rows[0];

                    var benchmarks = runBenchmarks(times, row);
                    typeResults[rowType] = benchmarks;

                    var jsonRow = JSON.stringify(row);
                    var jsvRow = JSV.stringify(row);

                    var minPayload = jsonRow.length < jsvRow.length ? jsonRow.length : jsvRow.length;

                    var benchmarkTimes = [
                        ['goog.serialize/goog.parse',
                            jsonRow.length,
                            (jsonRow.length / minPayload).toFixed(2),
                            benchmarks[BENCHMARK_TYPE.GOOG_SERIALIZE],
                            benchmarks[BENCHMARK_TYPE.GOOG_PARSE],
                            benchmarks[BENCHMARK_TYPE.GOOG_SERIALIZE] + benchmarks[BENCHMARK_TYPE.GOOG_PARSE],
                            ((benchmarks[BENCHMARK_TYPE.GOOG_SERIALIZE] + benchmarks[BENCHMARK_TYPE.GOOG_PARSE]) / times).toFixed(2),
                            0
                        ],
                        ['goog.serialize/goog.unsafeParse',
                            jsonRow.length,
                            (jsonRow.length / minPayload).toFixed(2),
                            benchmarks[BENCHMARK_TYPE.GOOG_SERIALIZE],
                            benchmarks[BENCHMARK_TYPE.GOOG_UNSAFE_PARSE],
                            benchmarks[BENCHMARK_TYPE.GOOG_SERIALIZE] + benchmarks[BENCHMARK_TYPE.GOOG_UNSAFE_PARSE],
                            ((benchmarks[BENCHMARK_TYPE.GOOG_SERIALIZE] + benchmarks[BENCHMARK_TYPE.GOOG_UNSAFE_PARSE]) / times).toFixed(2),
                            0
                        ],
                        ['JSON.stringify/JSON.parse',
                            jsonRow.length,
                            (jsonRow.length / minPayload).toFixed(2),
                            benchmarks[BENCHMARK_TYPE.JSON_STRINGIFY],
                            benchmarks[BENCHMARK_TYPE.JSON_PARSE],
                            benchmarks[BENCHMARK_TYPE.JSON_STRINGIFY] + benchmarks[BENCHMARK_TYPE.JSON_PARSE],
                            ((benchmarks[BENCHMARK_TYPE.JSON_STRINGIFY] + benchmarks[BENCHMARK_TYPE.JSON_PARSE]) / times).toFixed(2),
                            0
                        ],
                        ['JSV.stringify/JSV.parse',
                            jsvRow.length,
                            (jsvRow.length / minPayload).toFixed(2),
                            benchmarks[BENCHMARK_TYPE.JSV_STRINGIFY],
                            benchmarks[BENCHMARK_TYPE.JSV_PARSE],
                            benchmarks[BENCHMARK_TYPE.JSV_STRINGIFY] + benchmarks[BENCHMARK_TYPE.JSV_PARSE],
                            ((benchmarks[BENCHMARK_TYPE.JSV_STRINGIFY] + benchmarks[BENCHMARK_TYPE.JSV_PARSE]) / times).toFixed(2),
                            0
                        ]
                    ];
                    typeBenchmarkTimes[rowType] = benchmarkTimes;

                    var minTotalTime = 0;
                    for (var i=0; i<benchmarkTimes.length; i++)
                    {
                        var benchmarkTime = benchmarkTimes[i];
                        var totalTime = benchmarkTime[BENCHMARK.TOTAL_TIME];

                        if (i == 0 || totalTime < minTotalTime)
                        {
                            minTotalTime = totalTime;
                        }
                    }

                    for (var i=0; i<benchmarkTimes.length; i++)
                    {
                        benchmarkTimes[i][BENCHMARK.TOTAL_TIME_RATIO] = (benchmarkTimes[i][BENCHMARK.TOTAL_TIME] / minTotalTime).toFixed(2);
                    }

                    var html = getTableHtml(benchmarkTimes,
                        'Results of serializing and deserializing ' + rowType + ' ' + times + ' times');

                    $("#results").append(html);
                }


                var combinedTimes = {};
                var skipColumns = {0:true,2:true,8:true};

                for (var rowType in typeBenchmarkTimes)
                {
                    var rowTypeBenchmarks = typeBenchmarkTimes[rowType];

                    for (var i=0; i<rowTypeBenchmarks.length; i++)
                    {
                        var serializationTypeBenchmarks = rowTypeBenchmarks[i];
                        var rowHeading = serializationTypeBenchmarks[0];
                        if (!combinedTimes[rowHeading])
                        {
                            combinedTimes[rowHeading] = serializationTypeBenchmarks.slice(0); //clone
                        }
                        else
                        {
                            for (var j=0; j<serializationTypeBenchmarks.length; j++)
                            {
                                if (skipColumns[j]) continue;

                                combinedTimes[rowHeading][j] += serializationTypeBenchmarks[j];
                            }
                        }
                    }
                }

                var minPayload = 0;
                var minTotalTime = 0;
                for (var rowHeading in combinedTimes)
                {
                    var combinedTime = combinedTimes[rowHeading];

                    var totalSize = combinedTime[BENCHMARK.PAYLOAD_SIZE];
                    if (minPayload == 0 || totalSize < minPayload)
                    {
                        minPayload = totalSize;
                    }

                    var totalTime = combinedTime[BENCHMARK.TOTAL_TIME];
                    if (minTotalTime == 0 || totalTime < minTotalTime)
                    {
                        minTotalTime = totalTime;
                    }
                }

                var combinedBenchmarkTimes = [];
                for (var rowHeading in combinedTimes)
                {
                    var combinedTime = combinedTimes[rowHeading];

                    combinedTime[BENCHMARK.PAYLOAD_SIZE_RATIO] = (combinedTime[BENCHMARK.PAYLOAD_SIZE] / minPayload).toFixed(2);
                    combinedTime[BENCHMARK.TOTAL_TIME_RATIO] = (combinedTime[BENCHMARK.TOTAL_TIME] / minTotalTime).toFixed(2);
                    combinedTime[BENCHMARK.AVG_TOTAL_TIME] = (combinedTime[BENCHMARK.TOTAL_TIME] / times).toFixed(2);

                    combinedBenchmarkTimes.push(combinedTime);
                }

                //$("#log").append(JSV.stringify(combinedBenchmarkTimes));


                var html = getTableHtml(combinedBenchmarkTimes,
                    'Combined results of all benchmarks below (' + times + ' times)');

                $("#combined").html(html);

                //$("#log").html(JSV.stringify(typeResults));
            });

            var BENCHMARK_TYPE =
            {
                GOOG_PARSE: 1,
                GOOG_UNSAFE_PARSE: 2,
                GOOG_SERIALIZE: 3,
                JSON_PARSE: 4,
                JSON_STRINGIFY: 5,
                JSV_PARSE: 6,
                JSV_STRINGIFY: 7
            };

            var BENCHMARK =
            {
                NAME: 0,
                PAYLOAD_SIZE: 1,
                PAYLOAD_SIZE_RATIO: 2,
                SERIALIZATION_TIME: 3,
                DESERIALIZATION_TIME: 4,
                TOTAL_TIME: 5,
                AVG_TOTAL_TIME: 6,
                TOTAL_TIME_RATIO: 7
            };

            function runBenchmarks(times, row)
            {
                var start, end, elapsed;
                var results = [];

                start = new Date().getTime();
                for (var i = 0; i < times; i++) {
                    goog.json.serialize(row);
                }
                results[BENCHMARK_TYPE.GOOG_SERIALIZE] = new Date().getTime() - start; 

                start = new Date().getTime();
                for (var i = 0; i < times; i++) {
                    JSON.stringify(row);
                }
                results[BENCHMARK_TYPE.JSON_STRINGIFY] = new Date().getTime() - start; 

                start = new Date().getTime();
                for (var i = 0; i < times; i++) {
                    JSV.stringify(row);
                }
                results[BENCHMARK_TYPE.JSV_STRINGIFY] = new Date().getTime() - start;

                var json = goog.json.serialize(row);
                var jsv = JSV.stringify(row);

                start = new Date().getTime();
                for (var i = 0; i < times; i++) {
                    goog.json.parse(json);
                }
                results[BENCHMARK_TYPE.GOOG_PARSE] = new Date().getTime() - start;

                start = new Date().getTime();
                for (var i = 0; i < times; i++) {
                    goog.json.unsafeParse(json);
                }
                results[BENCHMARK_TYPE.GOOG_UNSAFE_PARSE] = new Date().getTime() - start;

                try
                {
                    start = new Date().getTime();
                    for (var i = 0; i < times; i++) {
                        JSON.parse(json);
                    }
                    results[BENCHMARK_TYPE.JSON_PARSE] = new Date().getTime() - start;
                }
                catch(e)
                {
                    results[BENCHMARK_TYPE.JSON_PARSE] = -1;
                }

                start = new Date().getTime();
                for (var i = 0; i < times; i++) {
                    JSV.parse(jsv);
                }
                results[BENCHMARK_TYPE.JSV_PARSE] = new Date().getTime() - start;

                return results;
            }


            function getTableHtml(benchmarkTimes, heading)
            {
                var sb = [];
                sb.push('<h3>' + heading + '</h3>');
                sb.push('<table><caption>* All times measured in milliseconds</caption>');
                sb.push('<thead>');
                sb.push('<tr>');
                sb.push('<th>Serializer</th>');
                sb.push('<th>Payload size</th>');
                sb.push('<th>Larger than best</th>');
                sb.push('<th>Serialization</th>');
                sb.push('<th>Deserialization</th>');
                sb.push('<th>Total</th>');
                sb.push('<th>Avg per iteration</th>');
                sb.push('<th>Slower than best</th>');
                sb.push('</tr>');
                sb.push('</thead>');
                sb.push('<tbody>');

                for (var i=0; i<benchmarkTimes.length; i++)
                {
                    sb.push('<tr>');
                    sb.push('<td>' + benchmarkTimes[i][BENCHMARK.NAME] + '</td>');
                    sb.push('<td>' + benchmarkTimes[i][BENCHMARK.PAYLOAD_SIZE] + '</td>');
                    sb.push('<td>' + benchmarkTimes[i][BENCHMARK.PAYLOAD_SIZE_RATIO] + '</td>');
                    sb.push('<td>' + benchmarkTimes[i][BENCHMARK.SERIALIZATION_TIME] + '</td>');
                    sb.push('<td>' + benchmarkTimes[i][BENCHMARK.DESERIALIZATION_TIME] + '</td>');
                    sb.push('<td>' + benchmarkTimes[i][BENCHMARK.TOTAL_TIME] + '</td>');
                    sb.push('<td>' + benchmarkTimes[i][BENCHMARK.AVG_TOTAL_TIME] + '</td>');
                    sb.push('<td>' + benchmarkTimes[i][BENCHMARK.TOTAL_TIME_RATIO] + '</td>');
                    sb.push('</tr>');
                }
                sb.push('</tbody>');
                sb.push('</table>');

                return sb.join('');
            }
        });
    </script>
</head>

<body>

<h2>Results of <span>JSON vs JSV</span> Northwind database Javascript serialization benchmarks</h2>
<span class="summary">
    These benchmarks show the total time in milliseconds that it takes each serializer to serialize
    and deserialize the first row from each table in the
    <a href='http://code.google.com/p/servicestack/source/browse/trunk/Common/Northwind.Benchmarks/Northwind.Common/DataModel/NorthwindData.cs'>Northwind
        Database</a>
    <strong>1,000</strong> Times.
    <br/><br/>The full source code of the serialization benchmarks is
    <a href='http://code.google.com/p/servicestack/source/browse/trunk/Common/Northwind.Benchmarks/Northwind.Benchmarks.Console/Program.cs'>available
        here</a>.
</span>

<button id="btnRun" disabled="disabled">Run Benchmarks</button>

<div id='combined'></div>

<div id='results'>

</div>

<div id="log"></div>

</body>
</html>
